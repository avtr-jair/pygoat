name: Scan-powershell

on:
  workflow_dispatch:
    inputs:
      do-translation:
        description: 'Run Fortify translation step'
        type: boolean
        default: false

  #push:
    #branches: [ main ]

jobs:
  Scan_Fortify:
    runs-on: self-hosted
    env:
      FORTIFY_BUILD: ${{ secrets.FORTIFY_BUILD }}
      FORTIFY_VERID: ${{ secrets.FORTIFY_VERID }}
      FORTIFY_TOKEN: ${{ secrets.FORTIFY_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Env
        if: ${{ github.event.inputs.do-translation == 'true' }}
        run: |
          python -m venv venv
          .\venv\Scripts\Activate.ps1
          pip install -r requirements.txt
          pip list
        shell: powershell

      - name: Run Fortify Translation
        if: ${{ github.event.inputs.do-translation == 'true' }}
        run: |
          .\venv\Scripts\Activate.ps1
          sourceanalyzer -b $env:FORTIFY_BUILD -clean
          sourceanalyzer -b $env:FORTIFY_BUILD `
            -python-version 3 `
            -python-path "C:\actions-runner\_work\pygoat\pygoat\venv\Lib\site-packages" `
            -django-template-dirs "C:\actions-runner\_work\pygoat\pygoat\challenge\templates;C:\actions-runner\_work\pygoat\pygoat\introduction\templates" `
            -django-disable-autodiscover -exclude "**\venv\**\*.*" `
            "."
        shell: powershell

      - name: Run Fortify Scan
        if: ${{ github.event.inputs.do-translation == 'true' }}
        run: |
          $output = scancentral -url $env:FORTIFY_SC_URL start -upload `
            -versionid $env:FORTIFY_VERID `
            -uptoken $env:FORTIFY_TOKEN `
            -b $env:FORTIFY_BUILD `
            -scan | Out-String

          Write-Host "Fortify Scan Output: $output"

          # Usar -match para extraer el token
          if ($output -match "Submitted job and received token:\s*(\S+)") {
              $token = $matches[1]
          } else {
              $token = "No token found"
          }

          Write-Host "Token extraido: $token"
          echo "FORTIFY_JOB_TOKEN=$token" >> $env:GITHUB_ENV
        env:
          FORTIFY_SC_URL: ${{ secrets.FORTIFY_SC_URL }}
        shell: powershell
      
      - name: LogIn Fortify SSC and SC-SAST
        run: |
          Write-Host "Logging in to Fortify SSC and SC-SAST"
          fcli config truststore set -f="C:\Program Files\Java\jdk-23\lib\security\cacerts"
          fcli ssc session login --url $env:FORTIFY_SSC_URL --user $env:FORTIFY_SSC_USER --password $env:FORTIFY_SSC_PASS
          
          fcli sc-sast session login --ssc-url $env:FORTIFY_SSC_URL -t $env:FORTIFY_TOKEN -c $env:FORTIFY_CLIENT_AUTH_TOKEN --connect-timeout 30s
        env:
          FORTIFY_SSC_URL: ${{ secrets.FORTIFY_SSC_URL }}
          FORTIFY_SSC_USER: ${{ secrets.FORTIFY_SSC_USER }}
          FORTIFY_SSC_PASS: ${{ secrets.FORTIFY_SSC_PASS }}
          FORTIFY_CLIENT_AUTH_TOKEN: ${{ secrets.FORTIFY_CLIENT_AUTH_TOKEN }}
        shell: powershell

      - name: Approve Artifact
        if: ${{ github.event.inputs.do-translation == 'true' }}
        run: | 
          Write-Host "Approving Artifact token: ${{env.FORTIFY_JOB_TOKEN}}"  

          fcli sc-sast scan wait-for $env:FORTIFY_JOB_TOKEN

          $artifactId = fcli ssc artifact list --av=$env:FORTIFY_VERID --output=json | jq -r '.[0].id'
          
          echo "ARTIFACT_ID=$artifactId" >> $env:GITHUB_ENV
          
          fcli ssc artifact approve $artifactId
        env:
          FORTIFY_CLIENT_AUTH_TOKEN: ${{ secrets.FORTIFY_CLIENT_AUTH_TOKEN }}
        shell: powershell

      - name: Download Fortify Report
        run: |
          Write-Host "Downloading Fortify Report for Artifact ID: 3182"
          fcli ssc artifact download 3182 -f ${{secrets.FORTIFY_BUILD}}.fpr
          
      - name: Upload FPR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fortify-fpr
          path: ${{secrets.FORTIFY_BUILD}}.fpr

      - name: Install Parser
        run: |
          Write-Host "Installing SARIF Parser"
          dotnet tool install --global Sarif.Multitool --version 2.2.2

      - name: Translate FPR to Serif 2.1.0
        run: |
          Write-Host "Translating FPR to Serif 2.1.0 format"
          sarif convert ${{secrets.FORTIFY_BUILD}}.fpr --tool FortifyFpr --output ${{secrets.FORTIFY_BUILD}}.fpr.sarif --pretty-print --force
        
      - name: Correct Sarif File
        run: |
          jq @'
          def walk(f):
            . as $in |
            if type == ""object"" then
              reduce keys[] as $key ({}; . + { ($key): ($in[$key] | walk(f)) }) | f
            elif type == ""array"" then
              map(walk(f)) | f
            else f
            end;
          walk(
            if type == ""object"" and (.guid? and .id?) then
              if (.guid | test(""^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"") | not)
              then .guid = (.guid[0:36]) | .id = (.id[0:36])
              else .
              end
            else .
            end
          )
          '@ ${{secrets.FORTIFY_BUILD}}.fpr.sarif > ${{secrets.FORTIFY_BUILD}}-corrected.fpr.sarif
        shell: powershell
        
      - name: Upload Sarif Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fortify-fpr-sarif
          path: ${{secrets.FORTIFY_BUILD}}-corrected.fpr.sarif

      - name: Upload SARIF File
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{secrets.FORTIFY_BUILD}}-corrected.fpr.sarif
          category: Fortify
          