name: Scan

on:
  push:
    branches: [ main ]

jobs:
  Scan_Fortify:
    runs-on: self-hosted
    env:
      FORTIFY_BUILD: ${{ secrets.FORTIFY_BUILD }}
      FORTIFY_VERID: ${{ secrets.FORTIFY_VERID }}
      FORTIFY_TOKEN: ${{ secrets.FORTIFY_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Env
        run: |
          python -m venv venv
          .\venv\Scripts\Activate.ps1
          pip install -r requirements.txt
          pip list
        shell: powershell

      - name: Run Fortify Translation
        run: |
          .\venv\Scripts\Activate.ps1
          sourceanalyzer -b $env:FORTIFY_BUILD -clean
          sourceanalyzer -b $env:FORTIFY_BUILD `
            -python-version 3 `
            -python-path "C:\actions-runner\_work\pygoat\pygoat\venv\Lib\site-packages" `
            -django-template-dirs "C:\actions-runner\_work\pygoat\pygoat\challenge\templates;C:\actions-runner\_work\pygoat\pygoat\introduction\templates" `
            -exclude "venv\**" `
            "."
        shell: powershell

      - name: Run Fortify Scan
        run: |
          $output = scancentral -url $env:FORTIFY_SC_URL start -upload `
            -versionid $env:FORTIFY_VERID `
            -uptoken $env:FORTIFY_TOKEN `
            -b $env:FORTIFY_BUILD `
            -scan | Out-String

          Write-Host "Fortify Scan Output: $output"

          # Usar -match para extraer el token
          if ($output -match "Submitted job and received token:\s*(\S+)") {
              $token = $matches[1]
          } else {
              $token = "No token found"
          }

          Write-Host "Token extraido: $token"
          
          echo "FORTIFY_JOB_TOKEN=$token" >> $GITHUB_ENV
        env:
          FORTIFY_SC_URL: ${{ secrets.FORTIFY_SC_URL }}
        shell: powershell

      - name: Approve Artifact
        run: | 
          Wrtie-Host "Approving Artifact token: $env:FORTIFY_JOB_TOKEN"  

          fcli config truststore set -f="C:\Program Files\Java\jdk-23\lib\security\cacerts"
          fcli ssc session login --url $env:FORTIFY_SSC_URL --user $env:FORTIFY_SSC_USER --password $env:FORTIFY_SSC_PASS
          
          fcli sc-sast session login --ssc-url $env:FORTIFY_SSC_URL -t $env:FORTIFY_TOKEN -c $env:FORTIFY_CLIENT_AUTH_TOKEN --connect-timeout 30s
          
          fcli sc-sast scan wait-for $env:FORTIFY_JOB_TOKEN

          $artifactId = fcli ssc artifact list --av=$env:FORTIFY_VERID --output=json | jq -r '.[0].id' 
          fcli ssc artifact approve $artifactId
        env:
          FORTIFY_SSC_URL: ${{ secrets.FORTIFY_SSC_URL }}
          FORTIFY_SSC_USER: ${{ secrets.FORTIFY_SSC_USER }}
          FORTIFY_SSC_PASS: ${{ secrets.FORTIFY_SSC_PASS }}
          FORTIFY_CLIENT_AUTH_TOKEN: ${{ secrets.FORTIFY_CLIENT_AUTH_TOKEN }}
          FORTIFY_JOB_TOKEN: ${{ env.FORTIFY_JOB_TOKEN }}
        shell: powershell